

# Uncomment the next line to define a global platform for your project
# platform :ios, '12.0'

target 'MMRDA' do
    # Comment the next line if you don't want to use dynamic frameworks
    use_frameworks!

    # Pods for MMRDA
    pod 'IQKeyboardManagerSwift'
    pod 'Firebase/Messaging'
    # pod 'ReachabilitySwift' # Reachability Swift (Internet Connection Check)
    pod 'Localize-Swift' # For Localization String
    pod 'Alamofire'
    pod 'FAPanels' # For SideMenu
    pod 'SVProgressHUD'
    pod 'DropDown'
    pod 'GooglePlaces'
    pod 'GooglePlacePicker'
    pod 'ACFloatingTextfield-Swift'
    pod 'SDWebImage'
     pod 'CountryPickerView'
    pod 'ImageSlideshow/SDWebImage'
    # pod 'EFQRCode', '~> 6.2.1'
    pod 'QRCode'
    pod 'Toast'

     pod 'Toast-Swift', '~> 5.0.1'
     
     
    
         
     
     
     post_install do |installer|
        installer.pods_project.targets.each do |target|
            target.build_configurations.each do |config|
                config.build_settings["ONLY_ACTIVE_ARCH"] = "NO"
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'

                xcode_base_version = `xcodebuild -version | grep 'Xcode' | awk '{print $2}' | cut -d . -f 1`

                installer.pods_project.targets.each do |target|
                    target.build_configurations.each do |config|
                        # For xcode 15+ only
                        if config.base_configuration_reference && Integer(xcode_base_version) >= 15
                            xcconfig_path = config.base_configuration_reference.real_path
                            xcconfig = File.read(xcconfig_path)
                            xcconfig_mod = xcconfig.gsub(/DT_TOOLCHAIN_DIR/, "TOOLCHAIN_DIR")
                            File.open(xcconfig_path, "w") { |file| file << xcconfig_mod }
                        end
                    end
                end
            end
        end
    end
end

target 'MMRDATests' do
    inherit! :search_paths
    # Pods for testing
end

target 'MMRDAUITests' do
    # Pods for testing
end


## Uncomment the next line to define a global platform for your project
##platform :ios, '12.0'
#
#target 'MMRDA' do
## Comment the next line if you don't want to use dynamic frameworks
#   use_frameworks!
#
#  # Pods for MMRDA
#         pod 'IQKeyboardManagerSwift'
#         pod 'Firebase/Messaging'
#         #pod 'ReachabilitySwift' # Reachability Swift (Internet Connection Check)
#         pod 'Localize-Swift' # For Localization String
#         pod 'Alamofire'
#         pod 'FAPanels' # For SideMenu
#         pod 'SVProgressHUD'
#         pod 'DropDown'
#         pod 'GooglePlaces'
#         pod 'GooglePlacePicker'
#         pod 'ACFloatingTextfield-Swift'
#         pod 'SDWebImage'
##         , '~> 5.0'
#         pod 'CountryPickerView'
#         pod "ImageSlideshow/SDWebImage"
#         #pod 'EFQRCode', '~> 6.2.1'
#          pod 'QRCode'
#          pod 'Toast'
#          
#         pod 'Toast-Swift', '~> 5.0.1'
##         post_install do |installer|
##           installer.pods_project.targets.each do |target|
##             target.build_configurations.each do |config|
##               config.build_settings["ONLY_ACTIVE_ARCH"] = "NO"
##             end
##           end
#           
#           post_install do |installer|
#             installer.aggregate_targets.each do |target|
#               target.xcconfigs.each do |variant, xcconfig|
#                 config.build_settings["ONLY_ACTIVE_ARCH"] = "NO"
#                 xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
#                 IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
#               end
#             end
#             installer.pods_project.targets.each do |target|
#               target.build_configurations.each do |config|
#                 if config.base_configuration_reference.is_a? Xcodeproj::Project::Object::PBXFileReference
#                   xcconfig_path = config.base_configuration_reference.real_path
#                   IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
#                 end
#               end
#             end
#           end
#
#       target 'MMRDATests' do
#    inherit! :search_paths
#    # Pods for testing
#  end
#
#  target 'MMRDAUITests' do
#    # Pods for testing
#  end
#
#end
